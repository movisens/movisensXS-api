package com.movisens.xs.api.test;

import static com.jayway.awaitility.Awaitility.await;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.Callable;

import org.junit.Test;

import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.reflect.TypeToken;
import com.movisens.xs.api.XSApi;
import com.movisens.xs.api.XSService;
import com.movisens.xs.api.exceptions.AuthorizationException;
import com.movisens.xs.api.exceptions.MovisensXSException;
import com.movisens.xs.api.models.Message;
import com.movisens.xs.api.models.Proband;
import com.movisens.xs.api.models.Result;
import com.movisens.xs.api.models.Study;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'Juergen' at '22.06.14 22:50' with Gradle 1.11
 *
 * @author Juergen, @date 22.06.14 22:50
 */
public class ApiTest {
	private static final String SERVER_URL = "https://hoc-hc013.hoc.uni-karlsruhe.de";
	private static final String API_KEY = "e4prtw8zcmw3a4evuesyjvzmfdfop25hl9zq9h2p";
	private static final Integer STUDY_ID = 989;
	
	XSService service = new XSApi.Builder(API_KEY).setServer(SERVER_URL)
			.build().create(XSService.class);

	@Test
	public void testGetMessages() throws AuthorizationException, IOException, MovisensXSException {
		List<Message> messages = service.getMessages(STUDY_ID, 3);
		assertEquals("getMessages should return list with first message text is 'test'", "test", messages.get(0).getMessage());
	}
	
	@Test
	public void testSendMessage() throws AuthorizationException, IOException, MovisensXSException {
		int nrOfMessages = service.getMessages(STUDY_ID, 3).size();
		Message message = service.sendMessage(STUDY_ID, 3, "Juergen.Stumpp@gmail.com", "Unit Test");
		int nrOfMessagesAfterSending = service.getMessages(STUDY_ID, 3).size();
		assertEquals("getMessages should return one more message after sending", 1, nrOfMessagesAfterSending - nrOfMessages);
		assertEquals("sendMessage should return one message with the text text 'Unit Test'", "Unit Test", message.getMessage());
	}
	
	@Test
	public void testGetStudy() throws AuthorizationException, IOException, MovisensXSException {
		Study study = service.getStudy(STUDY_ID);
		assertEquals("getStudy should return study with id STUDY_ID", (long)STUDY_ID, study.getId());
		assertEquals("getStudy should return study which name is 'UnitTest", "UnitTest", study.getName());
	}

	@Test
	public void testGetProbands() throws AuthorizationException, IOException, MovisensXSException {
		List<Proband> probands = service.getProbands(STUDY_ID);
		assertEquals("getProbands should return 4 result", 4, probands.size());
		assertEquals("getProbands user 0 should have status 'finished'",
				"finished", probands.get(0).getStatus());
	}

	private List<Proband> asyncProbands = null;

	@Test
	public void testGetProbandsAsync() {
		service.getProbands(STUDY_ID, new Callback<List<Proband>>() {
			@Override
			public void success(List<Proband> probands, Response response) {
				asyncProbands = probands;
			}

			@Override
			public void failure(RetrofitError error) {
				fail("Error receiving probands: " + error.getMessage());
			}
		});
		await().atMost(5, SECONDS).until(new Callable<Boolean>() {
			public Boolean call() throws Exception {
				return asyncProbands != null;
			}
		});
		assertEquals("getProbands should return 4 result", 4,
				asyncProbands.size());
		assertEquals("getProbands user 0 should have status 'finished'",
				"finished", asyncProbands.get(0).getStatus());
	}

	@Test
	public void testGetResults() throws AuthorizationException, IOException, MovisensXSException {
		List<Result> results = service.getResults(STUDY_ID);
		assertEquals("getResults should return 46 results", 46, results.size());
	}

	@Test
	public void testGetResultsAsJson() throws AuthorizationException, IOException, MovisensXSException {
		JsonElement jsonResults = service.getResultsAsJson(STUDY_ID);

		Gson gson = new Gson();
		Type collectionType = new TypeToken<List<MyResult>>() {
		}.getType();
		List<MyResult> results = gson.fromJson(jsonResults, collectionType);

		assertEquals("getResults should return 46 results", 46, results.size());
		assertEquals("getResults first result should have item_65_2 set to 1",
				1, results.get(0).item_65_2);
	}

	private List<Result> asyncResults = null;

	@Test
	public void testGetResultsAsync() {
		service.getResults(STUDY_ID, new Callback<List<Result>>() {
			@Override
			public void success(List<Result> results, Response response) {
				asyncResults = results;
			}

			@Override
			public void failure(RetrofitError error) {
				fail("Error receiving results: " + error.getMessage());
			}
		});
		await().atMost(5, SECONDS).until(new Callable<Boolean>() {
			public Boolean call() throws Exception {
				return asyncResults != null;
			}
		});
		assertEquals("getResults should return 46 results", 46,
				asyncResults.size());
	}
}
