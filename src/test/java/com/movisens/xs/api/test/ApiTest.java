package com.movisens.xs.api.test;

import static com.jayway.awaitility.Awaitility.await;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.Callable;

import org.junit.Test;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.reflect.TypeToken;
import com.movisens.xs.api.XSApi;
import com.movisens.xs.api.XSService;
import com.movisens.xs.api.exceptions.AuthorizationException;
import com.movisens.xs.api.exceptions.MovisensXSException;
import com.movisens.xs.api.models.Message;
import com.movisens.xs.api.models.Proband;
import com.movisens.xs.api.models.Result;
import com.movisens.xs.api.models.Study;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'Juergen' at '22.06.14 22:50' with Gradle 1.11
 *
 * @author Juergen, @date 22.06.14 22:50
 */
public class ApiTest {
	private static final String SERVER_URL = "https://staging.movisens.com";
	private static final String API_KEY = "vce7x41urn0ecoe9l4xe08qyp4qgkgudy6npr3fp";
	private static final Integer STUDY_ID = 4;
	private static final Integer PARTICIPANT_ID = 1;

	XSService service = new XSApi.Builder(API_KEY).setServer(SERVER_URL).build().create(XSService.class);

	@Test
	public void testGetMessages() throws AuthorizationException, IOException, MovisensXSException {
		Call<List<Message>> call = service.getMessages(STUDY_ID, PARTICIPANT_ID);
		List<Message> messages = call.execute().body();
		assertEquals("getMessages should return list with first message text is 'test'", "test",
				messages.get(0).getMessage());
	}

	@Test
	public void testSendMessage() throws AuthorizationException, IOException, MovisensXSException {
		Call<List<Message>> call = service.getMessages(STUDY_ID, PARTICIPANT_ID);
		int nrOfMessages = call.execute().body().size();
		Call<Message> sendMessageCall = service.sendMessage(STUDY_ID, PARTICIPANT_ID, "Juergen.Stumpp+movisensXSDemo@gmail.com", "Unit Test");
		Message message = sendMessageCall.execute().body();
		call = service.getMessages(STUDY_ID, PARTICIPANT_ID);
		int nrOfMessagesAfterSending = call.execute().body().size();
		assertEquals("getMessages should return one more message after sending", 1,
				nrOfMessagesAfterSending - nrOfMessages);
		assertEquals("sendMessage should return one message with the text text 'Unit Test'", "Unit Test",
				message.getMessage());
	}

	@Test
	public void testGetStudy() throws AuthorizationException, IOException, MovisensXSException {
		Study study = service.getStudy(STUDY_ID).execute().body();
		assertEquals("getStudy should return study with id STUDY_ID", (long) STUDY_ID, study.getId());
		assertEquals("getStudy should return study which name is 'CI-TEST", "CI-TEST", study.getName());
	}

	@Test
	public void testGetProbands() throws AuthorizationException, IOException, MovisensXSException {
		List<Proband> probands = service.getProbands(STUDY_ID).execute().body();
		assertEquals("getProbands should return 3 result", 3, probands.size());
		assertEquals("getProbands user 2 should have status 'not started'", "not started", probands.get(1).getStatus());
	}

	private List<Proband> asyncProbands = null;

	@Test
	public void testGetProbandsAsync() throws MovisensXSException {
		Call<List<Proband>> call = service.getProbands(STUDY_ID);
		call.enqueue(new Callback<List<Proband>>() {
			
			@Override
			public void onResponse(Call<List<Proband>> call, Response<List<Proband>> response) {
				asyncProbands = response.body();
			}
			
			@Override
			public void onFailure(Call<List<Proband>> call, Throwable t) {
				fail("Error receiving probands: " + t.getMessage());
			}
		});
		await().atMost(5, SECONDS).until(new Callable<Boolean>() {
			public Boolean call() throws Exception {
				return asyncProbands != null;
			}
		});
		assertEquals("getProbands should return 3 result", 3, asyncProbands.size());
		assertEquals("getProbands user 2 should have status 'not started'", "not started", asyncProbands.get(1).getStatus());
	}

	@Test
	public void testGetResults() throws AuthorizationException, IOException, MovisensXSException {
		List<Result> results = service.getResults(STUDY_ID).execute().body();
		assertEquals("getResults should return 2 results", 2, results.size());
	}

	@Test
	public void testGetResultsAsJson() throws AuthorizationException, IOException, MovisensXSException {
		JsonElement jsonResults = service.getResultsAsJson(STUDY_ID).execute().body();

		Gson gson = new Gson();
		Type collectionType = new TypeToken<List<MyResult>>() {
		}.getType();
		List<MyResult> results = gson.fromJson(jsonResults, collectionType);

		assertEquals("getResults should return 2 results", 2, results.size());
		assertEquals("getResults first result should have item_65_2 set to 1", 1, results.get(1).item_65_2);
	}

	private List<Result> asyncResults = null;

	@Test
	public void testGetResultsAsync() throws MovisensXSException {
		Call<List<Result>> call = service.getResults(STUDY_ID);
		call.enqueue(new Callback<List<Result>>() {
			
			@Override
			public void onResponse(Call<List<Result>> call, Response<List<Result>> response) {
				asyncResults = response.body();
			}
			
			@Override
			public void onFailure(Call<List<Result>> call, Throwable t) {
				fail("Error receiving results: " + t.getMessage());
			}
		});

		await().atMost(5, SECONDS).until(new Callable<Boolean>() {
			public Boolean call() throws Exception {
				return asyncResults != null;
			}
		});
		assertEquals("getResults should return 2 results", 2, asyncResults.size());
	}
}
