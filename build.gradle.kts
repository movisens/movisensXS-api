import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.util.regex.Pattern

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Juergen' at '22.06.14 22:50' with Gradle 1.11
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.11/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
    id("java")
    id("maven-publish")
    alias(libs.plugins.kotlin)
    alias(libs.plugins.versions)
}

group = "com.github.movisens"

val packageJsonVersionRegex = Pattern.compile("\"version\":").toRegex()

version = rootProject.file("package.json")
    .bufferedReader()
    .readLines()
    .firstOrNull { packageJsonVersionRegex.find(it) != null }
    ?.replace(packageJsonVersionRegex, "")
    ?.replace(Regex("[\",]"), "")
    ?.trim() ?: "1.0.0"

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code
    implementation(libs.kotlin.stdlib.jdk8)
    implementation(libs.bundles.retrofit)
    implementation(libs.okhttp.logging.interceptor)

    testImplementation(libs.bundles.test)
}
tasks.withType(KotlinCompile::class.java)
    .configureEach { compilerOptions.jvmTarget.set(JvmTarget.fromTarget(libs.versions.jvm.get())) }
java {
    sourceCompatibility = JavaVersion.toVersion(libs.versions.jvm.get())
    targetCompatibility = JavaVersion.toVersion(libs.versions.jvm.get())
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            from(components["java"])
        }
    }
}

tasks.withType<DependencyUpdatesTask> {
    rejectVersionIf {
        isNonStable(candidate.version)
    }
}

fun isNonStable(version: String): Boolean {
    val stableKeyword = listOf("RELEASE", "FINAL", "GA").any { version.uppercase().contains(it) }
    val regex = "^[0-9,.v-]+$".toRegex()
    val isStable = stableKeyword || regex.matches(version)
    return isStable.not()
}

